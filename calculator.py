words_to_numbers = { #Это словарь, который сопоставляет русские слова-числа  их числовым значениям.

    "ноль": 0, 
    "один": 1,
    "два": 2, 
    "три": 3,
    "четыре": 4,
    "пять": 5,
    "шесть": 6, 
    "семь": 7,
    "восемь": 8,
    "девять": 9,
    "десять": 10,
    "одиннадцать": 11,
    "двенадцать": 12,
    "тринадцать": 13,
    "четырнадцать": 14,
    "пятнадцать": 15, 
    "шестнадцать": 16,
    "семнадцать": 17, 
    "восемнадцать": 18,
    "девятнадцать": 19, 
    "двадцать": 20,
    "тридцать": 30,
    "сорок": 40,
    "пятьдесят": 50,
    "шестьдесят": 60, 
    "семьдесят": 70, 
    "восемьдесят": 80,
    "девяносто": 90, 
    "сто": 100, 
    "минус": "-"
}

operations = {"плюс": "+", "минус": "-", "умножить": "*", "разделить": "//"} #Это словарь, который сопоставляет русские слова-операции  с соответствующими математическими символами в питоне .



def convert_to_number(word):#Это функция, которая принимает на вход одно слово (`word`) и возвращает его числовое значение из словаря `words_to_numbers`. Если слово не найдено в словаре, функция возвращает `None`.

    return words_to_numbers.get(word)

def convert_to_words(number):#Эта функция преобразует число (`number`) в его текстовое слово на русском языке. Она обрабатывает 0, отрицательные числа и числа от 0 до 99. Для чисел от 0 до 19 используется список, а для чисел от 20 до 99 — разбиение на десятки и единицы.

    if number == 0:
        return "ноль"
    if number < 0:
        return "минус " + convert_to_words(abs(number))
    if 0 <= number <= 19:
        return ["ноль", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять",
                "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать",
                "семнадцать", "восемнадцать", "девятнадцать"][number]
    tens_map = ["", "", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто"]
    units_map = ["", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"]
    tens = number // 10 # делит число нацело и показывает сколько у нас десятков 
    units = number % 10 #вычисляет остаток от деления числа `number` на 10 и присваивает результат переменной `units`.

    result = tens_map[tens]
    if units > 0:
        result += " " + units_map[units]
    return result

def calculate(example): #Это  функция калькулятора. Она принимает список слов (`example`), полученный из пользовательского ввода.

    #Обработка скобок 
    open_paren = example.index("открывается") if "открывается" in example else -1 #Эта строка находит индексы открывающейся скобки в выражении, если она присутствуют.

    close_paren = example.index("закрывается") if "закрывается" in example else -1 #Эта строка находит индексы  закрывающейся скобки в выражении, если она присутствуют.


    if open_paren != -1 and close_paren != -1 and open_paren < close_paren: #Этот блок кода обрабатывает скобки. Если скобки найдены, он извлекает выражение внутри скобок (`inner_expression`), рекурсивно вызывает функцию `calculate` для вычисления этого подвыражения и заменяет подвыражение в скобках результатом вычисления. 
        inner_expression = example[open_paren + 1:close_paren]
        try:
            inner_result = calculate(inner_expression) #Рекурсивный вызов для подвыражения в скобках
            if isinstance(inner_result, str) and inner_result.startswith("Ошибка"): #Обработка ошибок из рекурсивного вызова
                return inner_result
            example = example[:open_paren] + [str(inner_result)] + example[close_paren + 1:]

        except Exception as e:
          return f"Ошибка обработки скобок: {e}"


    if len(example) < 3 :#Проверяет, достаточно ли слов во входном выражении (должно быть минимум три: операнд, операция, операнд).

        return "Некорректный ввод: Неверное количество слов"

    op_index = -1 #Этот цикл ищет индекс слова-операции в списке слов.

    for i, word in enumerate(example):
        if word in operations:
            op_index = i
            break
    if op_index == -1:
        return "Некорректный ввод: Отсутствует операция"

    operand1_words = example[:op_index]
    operand2_words = example[op_index + 1:]

    operand1 = sum(convert_to_number(w) for w in operand1_words if convert_to_number(w) is not None)
    operand2 = sum(convert_to_number(w) for w in operand2_words if convert_to_number(w) is not None)

    if operand1 is None or operand2 is None: #Проверяет, удалось ли преобразовать оба операнда в числа.

        return "Некорректный ввод: Не распознаны операнды"

    operation = operations[example[op_index]] #Получает символ операции из словаря `operations`.

    try: #Блок `try...except` обрабатывает возможные ошибки во время вычислений (деление на ноль, переполнение и другие ошибки).


        result = eval(str(operand1) + operation + str(operand2))#Вычисляет результат арифметической операции.
        return convert_to_words(result) #Преобразует результат в текстовое представление и возвращает его.

    except ZeroDivisionError:
        return "Ошибка вычисления: Деление на ноль"
    except (OverflowError, ArithmeticError, SyntaxError, NameError, TypeError):
        return "Ошибка вычисления: Неверная операция или операнды"


print("Здравсвуйте. Введите пример :")#выводит приглашение ввести арифметическое выражение.

example = input().split() # выводит список слов, на которые был разделен ввод пользователя.
                #Эти строки запрашивают у пользователя ввод, разделяют его на слова с помощью `split()` и передают в функцию `calculate` для вычисления. Результат вычисления выводится на экран.
                
print(calculate(example)) #выводит результат вычисления арифметического выражения.
